//+------------------------------------------------------------------+
//|                        TrendFilter.mqh                           |
//|                  Copyright 2025, Hipoalgorithm Team              |
//|                                                                  |
//+------------------------------------------------------------------+
// توضیح روان و کامل:
// این کلاس فیلتر روند ایچیموکو را برای نسخه 1.6 مدیریت می‌کند. وظیفه اصلی آن تشخیص جهت روند (BUY/SELL/NEUTRAL) بر اساس ابر آینده ایچیموکو است.
// در نسخه 1.6، منطق این فیلتر به صورت "دیررس" (Late-stage) عمل می‌کند: چک کردن روند به آخرین لحظه ممکن، یعنی درست قبل از اجرای معامله Market، موکول شده است.
// این کلاس با فرصت N کندل برای تأیید، به سیستم انعطاف‌پذیری می‌بخشد تا سیگنال‌های خوب به دلیل نویز موقت رد نشوند.
//
// وظایف اصلی:
// - Init/Deinit: توابع ساده‌ای برای مقداردهی اولیه و دفع، بدون مدیریت هندل اشتراکی.
// - GetTrendDirection: تابع کلیدی که یک هندل ایچیموکو محلی برای تایم فریم مشخص (`tf`) ایجاد می‌کند، ابر آینده (Future Kumo) را محاسبه کرده و جهت روند را برمی‌گرداند. پس از اتمام کار، هندل را آزاد می‌کند تا از نشت حافظه جلوگیری شود.
//
// بهینه‌سازی‌ها و اصلاحات نسخه 1.6:
// - **رفع باگ حیاتی:** حذف هندل اشتراکی (`m_ichimokuHandle`) و جایگزینی آن با هندل‌های محلی در `GetTrendDirection` برای جلوگیری از عدم تطابق تایم فریم محاسباتی با تایم فریم هندل.
// - **مدیریت منابع:** تضمین آزادسازی (`IndicatorRelease`) هندل در تمام مسیرهای خروجی تابع (چه در صورت موفقیت و چه در صورت خطا).
// - **لاگ‌گذاری دقیق:** ارائه لاگ‌های واضح در صورت بروز خطا در ایجاد هندل یا کپی کردن بافرها.
//
// این کامنت بخشی از سند کلی نسخه 1.6 است: این ماژول به عنوان یک فیلتر نهایی در منطق ورود دو مرحله‌ای عمل کرده و به افزایش کیفیت معاملات کمک شایانی می‌کند.

#ifndef TREND_FILTER_MQH
#define TREND_FILTER_MQH

#include "Settings.mqh"

class CTrendFilter
{
public:
    // سازنده پیش‌فرض
    CTrendFilter() {}

    // مقداردهی اولیه (در این نسخه کار خاصی انجام نمی‌دهد)
    bool Init()
    {
        if(InpDebugMode) Print("فیلتر روند ایچیموکو مقداردهی شد.");
        return true;
    }

    // دفع مقداردهی (در این نسخه کار خاصی انجام نمی‌دهد)
    void Deinit()
    {
        if(InpDebugMode) Print("فیلتر روند ایچیموکو دفع شد.");
    }

    // تابع کلیدی: گرفتن جهت روند بر اساس تایم‌فریم مشخص
    ENUM_TREND_DIRECTION GetTrendDirection(ENUM_TIMEFRAMES tf)
    {
        if(!Inp_IchimokuFilter_Enabled)
        {
            return TREND_NEUTRAL;
        }

        // 1. ایجاد هندل ایچیموکو به صورت محلی برای تایم فریم ورودی
        int ichimokuHandle = iIchimoku(_Symbol, tf, Inp_Ichimoku_Tenkan, Inp_Ichimoku_Kijun, Inp_Ichimoku_SenkouB);
        if(ichimokuHandle == INVALID_HANDLE)
        {
            Print("خطا در ایجاد هندل ایچیموکو برای تایم‌فریم ", EnumToString(tf), ". کد خطا: ", GetLastError());
            return TREND_NEUTRAL;
        }

        // 2. کپی کردن بافرهای مورد نیاز
        double tenkan[1], kijun[1];
        if(CopyBuffer(ichimokuHandle, 0, 1, 1, tenkan) != 1 || CopyBuffer(ichimokuHandle, 1, 1, 1, kijun) != 1)
        {
            Print("خطا در CopyBuffer ایچیموکو برای تایم فریم ", EnumToString(tf), ". کد خطا: ", GetLastError());
            IndicatorRelease(ichimokuHandle); // آزاد کردن هندل قبل از خروج
            return TREND_NEUTRAL;
        }

        // 3. محاسبه ابر آینده (Future Kumo)
        // Future Senkou Span A
        double futureSenkouA = (tenkan[0] + kijun[0]) / 2.0;

        // Future Senkou Span B
        int senkouB_Period = Inp_Ichimoku_SenkouB;
        double highestHigh = iHigh(_Symbol, tf, iHighest(_Symbol, tf, MODE_HIGH, senkouB_Period, 1));
        double lowestLow = iLow(_Symbol, tf, iLowest(_Symbol, tf, MODE_LOW, senkouB_Period, 1));
        double futureSenkouB = (highestHigh + lowestLow) / 2.0;

        // 4. تشخیص جهت روند
        ENUM_TREND_DIRECTION direction;
        double cloudDiffPoints = MathAbs(futureSenkouA - futureSenkouB) / _Point;

        if(cloudDiffPoints < Inp_Ichimoku_FlatThreshold_Points)
        {
            direction = TREND_NEUTRAL;
        }
        else if(futureSenkouA > futureSenkouB)
        {
            direction = TREND_BUY;
        }
        else
        {
            direction = TREND_SELL;
        }
        
        if(InpDebugMode)
        {
             Print("فیلتر ایچیموکو (", EnumToString(tf), "): SenkouA=", futureSenkouA, ", SenkouB=", futureSenkouB, " -> جهت: ", EnumToString(direction));
        }

        // 5. آزاد کردن هندل محلی
        IndicatorRelease(ichimokuHandle);

        return direction;
    }
};

#endif
