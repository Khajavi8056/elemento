// فرآیند تلاش ورود: چک ابطال، تایید قیمت و فیلتر روند، اجرای معامله اگر تایید شد (نسخه کاملاً صحیح)
void CRange::ProcessEntryAttempt()
{
   // قدم اول: تشخیص جهت معتبر از متغیر ذخیره‌شده
   bool isBuyAttempt = m_isBuyAttempt;
   double close1 = iClose(_Symbol, m_timeframe, 1);

   // قدم دوم: اجرای استراتژی تایید/ابطال با switch
   switch(Inp_Confirmation_Strategy)
   {
      case CONFIRMATION_TIMEOUT:
         m_waitCounter++;
         if(m_waitCounter > Inp_Confirmation_Timeout)
         {
            if(isBuyAttempt) m_buyAttemptDisabled = true;
            else m_sellAttemptDisabled = true;
            CLogger::Log("رنج " + IntegerToString(m_rangeIndex) + ": مهلت تایید تمام شد. ابطال دائمی جهت " + (isBuyAttempt ? "خرید" : "فروش") + ".", m_rangeIndex);
            ResetToArmedState();
            return;
         }
         break;

      // ================== شروع اصلاحیه آکولاد ==================
      case CONFIRMATION_PRICE_INVALIDATION:
      { // آکولاد باز برای شروع محدوده case
         bool isInvalid = false;
         if(Inp_Invalidation_Mode == INVALIDATION_RANGE_REENTRY)
         {
            if(isBuyAttempt && close1 < m_rangeHigh) isInvalid = true;
            if(!isBuyAttempt && close1 > m_rangeLow) isInvalid = true;
         }
         else
         {
            if(isBuyAttempt && close1 < m_potentialBuyPrice) isInvalid = true;
            if(!isBuyAttempt && close1 > m_potentialSellPrice) isInvalid = true;
         }

         if(isInvalid)
         {
            CLogger::Log("رنج " + IntegerToString(m_rangeIndex) + ": شرط ابطال قیمتی رخ داد. ریست موقت.", m_rangeIndex);
            ResetToArmedState();
            return;
         }
         break;
      } // آکولاد بسته برای پایان محدوده case
      // ================== پایان اصلاحیه آکولاد ===================
   }

   // قدم سوم: تایید قیمت اختیاری (این بخش باید خارج از switch باشه)
   if(Inp_PriceConfirmation_Enabled)
   {
      bool priceConfirmed = (isBuyAttempt ? (close1 > m_breakerCandleLevel) : (close1 < m_breakerCandleLevel));
      if(!priceConfirmed)
      {
         CLogger::Log("رنج " + IntegerToString(m_rangeIndex) + ": تایید قیمت برقرار نیست. صبر برای کندل بعدی.", m_rangeIndex);
         return;
      }
   }

   // قدم چهارم: اجرای فیلتر روند (این بخش هم باید خارج از switch باشه)
   ENUM_TREND_DIRECTION currentTrend = g_trendFilter.GetTrendDirection(m_trendFilterTimeframe);
   bool filterConfirmed = false;
   if(!Inp_IchimokuFilter_Enabled)
   {
      filterConfirmed = true;
   }
   else
   {
      if(isBuyAttempt && currentTrend == TREND_BUY) filterConfirmed = true;
      else if(!isBuyAttempt && currentTrend == TREND_SELL) filterConfirmed = true;
      else if(currentTrend == TREND_NEUTRAL)
      {
         CLogger::Log("رنج " + IntegerToString(m_rangeIndex) + ": روند خنثی. صبر برای جهت مشخص.", m_rangeIndex);
         return;
      }
   }

   // اجرای معامله اگر فیلتر تایید شد
   if(filterConfirmed)
   {
      CLogger::Log("رنج " + IntegerToString(m_rangeIndex) + ": تمام تاییدها برقرار. اجرای معامله.", m_rangeIndex);
      ExecuteTrade(isBuyAttempt);
   }
}
